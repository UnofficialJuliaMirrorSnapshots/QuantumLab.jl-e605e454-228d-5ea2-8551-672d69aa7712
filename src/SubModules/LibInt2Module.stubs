# TO BE INCLUDED IN LibInt2Module IF libint2 IS NOT AVAILABLE

  print("\b\b\b\b\b\b\b\b\b\b(stub)....")
  using ..BaseModule
  using ..ShellModule
  using ..BasisFunctionsModule
  using ..IntegralsModule
  using ..BasisModule
  using ..AtomModule
  using ..GeometryModule
  # Init/Final
  libInt2Initialize() = return
  libInt2Finalize() = return
  # Shell
  const LibInt2Shell = Shell
  function Shell(center::Vector{Float64},lqn::Int, nprim::Int, exponents::Vector{Float64},coefficients::Vector{Float64};renorm::Bool=true)
    Shell(Position(center...),LQuantumNumber(lqn),exponents,coefficients;renorm=renorm)
  end
  # Engine
  type LibInt2Engine
    geo::Geometry
    LibInt2Engine() = new()
    LibInt2Engine(geo::Geometry) = new(geo)
    LibInt2Engine(atom::Atom) = new(Geometry([atom]))
  end
  LibInt2EngineCoulomb(maxNumberPrimitives::Int,maxLQN::LQuantumNumber) = return LibInt2Engine()
  LibInt2EngineOverlap(maxNumberPrimitives::Int,maxLQN::LQuantumNumber) = return LibInt2Engine()
  LibInt2EngineKinetic(maxNumberPrimitives::Int,maxLQN::LQuantumNumber) = return LibInt2Engine()
  LibInt2EngineNuclearAttraction(maxNumberPrimitives::Int,maxLQN::LQuantumNumber,geo::Geometry) = return LibInt2Engine(geo)
  LibInt2EngineNuclearAttraction(maxNumberPrimitives::Int,maxLQN::LQuantumNumber,atom::Atom) = return LibInt2Engine(atom)
  #
  destroy!(shell::LibInt2Shell) = return
  destroy!(engine::LibInt2Engine) = return
  lqn(sh::Shell) = return sh.lqn.exponent
  nprims(sh::Shell) = return length(sh.coefficients)
  nbf(sh::Shell) = ShellModule.nbf(sh)
  #
  computeBasisShellsLibInt2 = computeBasisShells
  #
  computeMatrixBlockOverlap(engine::LibInt2Engine,sh1::LibInt2Shell,sh2::LibInt2Shell) = computeMatrixBlockOverlap(sh1,sh2)
  computeMatrixBlockKinetic(engine::LibInt2Engine,sh1::LibInt2Shell,sh2::LibInt2Shell) = computeMatrixBlockKinetic(sh1,sh2)
  computeMatrixBlockNuclearAttraction(engine::LibInt2Engine,sh1::LibInt2Shell,sh2::LibInt2Shell) = computeMatrixBlockNuclearAttraction(sh1,sh2,engine.geo)
  computeTensorBlockElectronRepulsionIntegrals(eng::LibInt2Engine,sh1::LibInt2Shell,sh2::LibInt2Shell,sh3::LibInt2Shell,sh4::LibInt2Shell) = computeTensorBlockElectronRepulsionIntegrals(sh1,sh2,sh3,sh4)
